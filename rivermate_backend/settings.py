"""
Django settings for rivermate_backend project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from os import getenv, path
import sys
import dj_database_url
from pathlib import Path
import dotenv
from django.core.management.utils import get_random_secret_key
import sentry_sdk
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

dotenv_file = BASE_DIR / ".env.local"

if path.isfile(dotenv_file):
    dotenv.load_dotenv(dotenv_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv("DJANGO_SECRET_KEY", get_random_secret_key())


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenv("DEBUG", "False") == "True"

DEVELOPMENT_MODE = getenv("DEVELOPMENT_MODE", "False") == "True"

ALLOWED_HOSTS = ["*"]
# ALLOWED_HOSTS = getenv(
#     "DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost,e498-45-126-3-252.ngrok-free.app"
# ).split(",")


# Application definition
APPEND_SLASH = False
INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "storages",
    "djoser",
    "markdownx",
    "social_django",
    "users",
    "chat_management",
    "employer_management",
    "employee_management",
    "partner_management",
    "contract_management",
    "optionsets_management",
    "invoice_management",
    "payroll_management",
    "country_management",
    "email_management",
    "payslip_management",
    "webhook_management",
    "content_management",
    "django_celery_results",
    "django_celery_beat",
    "magic_link",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # new
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "rivermate_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "rivermate_backend.wsgi.application"
ASGI_APPLICATION = "rivermate_backend.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

if DEVELOPMENT_MODE is True:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": path.join(BASE_DIR, "db.sqlite3"),
        }
    }
elif len(sys.argv) > 0 and sys.argv[1] != "collectstatic":
    if getenv("DATABASE_URL", None) is None:
        raise Exception("DATABASE_URL environment variable not defined")
    DATABASES = {
        "default": dj_database_url.parse(getenv("DATABASE_URL")),
    }


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

if DEVELOPMENT_MODE is True:
    STATIC_URL = "static/"
    STATIC_ROOT = BASE_DIR / "static"
    MEDIA_URL = "/media/"
    MEDIA_ROOT = BASE_DIR / "media"
else:
    AWS_S3_ACCESS_KEY_ID = getenv("AWS_S3_ACCESS_KEY_ID")
    AWS_S3_SECRET_ACCESS_KEY = getenv("AWS_S3_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = getenv("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_REGION_NAME = getenv("AWS_S3_REGION_NAME")
    AWS_S3_ENDPOINT_URL = f"https://{AWS_S3_REGION_NAME}.digitaloceanspaces.com"
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    AWS_DEFAULT_ACL = "public-read"
    AWS_LOCATION = "static"
    AWS_MEDIA_LOCATION = "media"
    AWS_S3_CUSTOM_DOMAIN = getenv("AWS_S3_CUSTOM_DOMAIN")
    STORAGES = {
        "default": {"BACKEND": "custom_storages.CustomS3Boto3Storage"},
        "staticfiles": {"BACKEND": "storages.backends.s3boto3.S3StaticStorage"},
    }


AUTHENTICATION_BACKENDS = [
    "social_core.backends.google.GoogleOAuth2",
    "django.contrib.auth.backends.ModelBackend",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "users.authentication.CustomJWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.OrderingFilter",
    ],
}

DJOSER = {
    "PASSWORD_RESET_CONFIRM_URL": "password-reset/{uid}/{token}",
    "SEND_ACTIVATION_EMAIL": True,
    "ACTIVATION_URL": "activation/{uid}/{token}",
    "USER_CREATE_PASSWORD_RETYPE": True,
    "PASSWORD_RESET_CONFIRM_RETYPE": True,
    "PASSWORD_RESET_SHOW_EMAIL_NOT_FOUND": True,
    "TOKEN_MODEL": None,
    "SOCIAL_AUTH_ALLOWED_REDIRECT_URIS": getenv("REDIRECT_URLS").split(","),
}

# MAGIC LINK
MAGIC_LINK = {
    "DEFAULT_EXPIRY": 300,
    "DEFAULT_REDIRECT": "/",
    "AUTHENTICATION_BACKEND": "django.contrib.auth.backends.ModelBackend",
    "SESSION_EXPIRY": 7 * 24 * 60 * 60,
}

AUTH_COOKIE = "access"
AUTH_COOKIE_MAX_AGE = 60 * 60 * 24
AUTH_COOKIE_SECURE = getenv("AUTH_COOKIE_SECURE", "True") == "True"
AUTH_COOKIE_HTTP_ONLY = True
AUTH_COOKIE_PATH = "/"
AUTH_COOKIE_SAMESITE = "None"
AUTH_TOKEN_VALIDITY = timedelta(days=1)
SESSION_COOKIE_AGE = 24 * 60 * 60  # 1 day can change
SESSION_SAVE_EVERY_REQUEST = True
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = getenv("GOOGLE_AUTH_KEY")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = getenv("GOOGLE_AUTH_SECRET")
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    "https://www.googleapis.com/auth/userinfo.email",
    "https://www.googleapis.com/auth/userinfo.profile",
    "openid",
]

SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = ["first_name", "last_name"]

FRONTEND_URL = "localhost:3000"
CORS_ALLOWED_ORIGINS = getenv(
    "CORS_ALLOWED_ORIGINS", "http://localhost:3000,http://127.0.0.1:3000"
).split(",")
CORS_ALLOW_CREDENTIALS = True
SENDGRID_API_KEY = getenv("SENDGRID_API_KEY")
EMAIL_HOST = "smtp.sendgrid.net"
EMAIL_HOST_USER = "apikey"  # this is exactly the value 'apikey'
EMAIL_HOST_PASSWORD = getenv("SENDGRID_API_KEY")
EMAIL_PORT = 587
EMAIL_USE_TLS = getenv("EMAIL_USE_TLS", "True") == "True"
DEFAULT_FROM_EMAIL = getenv("DEFAULT_FROM_EMAIL")
DOMAIN = getenv("DOMAIN")
SITE_NAME = getenv("SITE_NAME")

# EMAIL TEMPLATES
QUOTE_MAIL_TEMPLATE_ID = getenv("QUOTE_MAIL_TEMPLATE_ID")
EMPLOYER_QUOTE_MAIL_TEMPLATE_ID = getenv("EMPLOYER_QUOTE_MAIL_TEMPLATE_ID")
PARTNER_REMINDER_QUOTE_TEMPLATE_ID = getenv("PARTNER_REMINDER_QUOTE_TEMPLATE_ID")
QUOTE_REMINDER_MAIL_TEMPLATE_ID = getenv("QUOTE_REMINDER_MAIL_TEMPLATE_ID")
MAGIC_LOGIN_LINK_TEMPLATE_ID = getenv("MAGIC_LOGIN_LINK_TEMPLATE_ID")
EMPLOYEE_ONBOARDING_REMINDER_TEMPLATE_ID = getenv(
    "EMPLOYEE_ONBOARDING_REMINDER_TEMPLATE_ID"
)
ADD_INVOICE_MAIL_TEMPLATE_ID = getenv("ADD_INVOICE_MAIL_TEMPLATE_ID")
REMIND_PENDING_PAYSLIPS_MAIL_TEMPLATE_ID = getenv(
    "REMIND_PENDING_PAYSLIPS_MAIL_TEMPLATE_ID"
)
PARTNER_PAYROLL_REMINDER_MAIL_TEMPLATE_ID = getenv(
    "PARTNER_PAYROLL_REMINDER_MAIL_TEMPLATE_ID"
)
CREATE_INVOICE_REMINDER_TEMPLATE_ID = getenv("CREATE_INVOICE_REMINDER_TEMPLATE_ID")

# ESIGN
ESIGN_CREATE_EOR_CONTRACT_TEMPLATE_ID = getenv("ESIGN_CREATE_EOR_CONTRACT_TEMPLATE_ID")
ESIGN_PARTNER_SERVICE_AGREEMENT_TEMPLATE_ID = getenv(
    "ESIGN_PARTNER_SERVICE_AGREEMENT_TEMPLATE_ID"
)
ESIGN_PARTNER_NON_DICLOSURE_TEMPLATE_ID = getenv(
    "ESIGN_PARTNER_NON_DICLOSURE_TEMPLATE_ID"
)
ESIGN_TOKEN = getenv("ESIGN_TOKEN")

QUICKBOOKS_CLIENT_ID = getenv("QUICKBOOKS_CLIENT_ID")
QUICKBOOKS_CLIENT_SECRET = getenv("QUICKBOOKS_CLIENT_SECRET")

# WISE
WISE_TOKEN = getenv("WISE_TOKEN")

# EMAIL_HOST = 'smtp.sendgrid.net'
# EMAIL_HOST_USER = 'apikey'  # this is exactly the value 'apikey'
# EMAIL_HOST_PASSWORD = SENDGRID_API_KEY
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=2),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
}
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "users.UserAccount"

CHAT_REDIS_URL = "redis://localhost:6379/2"
# Celery - prefix with CELERY_
CELERY_BROKER_URL = "redis://localhost:6379/0"
result_backend = "django_db"
accept_content = ["json"]
task_serializer = "json"
CELERY_TASK_TRACK_STARTED = True
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
CELERY_BEAT_SCHEDULE = {
    "celery.backend_cleanup": {
        "task": "celery.backend_cleanup",
        "schedule": timedelta(seconds=300),  # Run every 5 minutes
    },
}
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}
if DEBUG is False:
    sentry_sdk.init(
        dsn="https://f5dee3ff78444d483f49762591f8162b@o813838.ingest.us.sentry.io/4506926348566528",
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        traces_sample_rate=1.0,
        # Set profiles_sample_rate to 1.0 to profile 100%
        # of sampled transactions.
        # We recommend adjusting this value in production.
        profiles_sample_rate=1.0,
    )
